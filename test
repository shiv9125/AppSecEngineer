import asyncio
import aiohttp

async def fetch_url(session, url):
    try:
        async with session.get(url, timeout=10) as response:
            response.raise_for_status()
            return await response.json()
    except aiohttp.ClientError as e:
        return {"error": f"Client error occurred: {e}"}
    except asyncio.TimeoutError:
        return {"error": "Request timed out"}

async def fetch_data_from_apis(urls):
  
    async with aiohttp.ClientSession() as session:
        tasks = [fetch_url(session, url) for url in urls]
        return await asyncio.gather(*tasks)

def lambda_handler(event, context):
   
    urls = event.get("urls", [])
    if not urls:
        return {
            "statusCode": 400,
            "body": "No URLs provided in the event payload."
        }

    try:
        loop = asyncio.get_event_loop()
        results = loop.run_until_complete(fetch_data_from_apis(urls))
        return {
            "statusCode": 200,
            "body": results
        }
    except Exception as e:
        return {
            "statusCode": 500,
            "body": f"An error occurred: {e}"
        }

Example payload for testing in AWS Lambda:
 {
    "urls": [
        "https://jsonplaceholder.typicode.com/post/1",
        "https://jsonplaceholder.typicode.com/post/2"
   ]
}
